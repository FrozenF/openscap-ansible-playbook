---
- name: OpenSCAP Security Scan for Ubuntu 22.04
  hosts: all
  become: yes
  vars:
    security_guide_version: "0.1.76"
    security_guide_url: "https://github.com/ComplianceAsCode/content/releases/download/v{{ security_guide_version }}/scap-security-guide-{{ security_guide_version }}.zip"
    work_directory: "/opt/openscap"
    results_directory: "/opt/openscap/results"
    profile_id: "xccdf_org.ssgproject.content_profile_cis_level2_server"
    
  tasks:
    - name: Create working directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ work_directory }}"
        - "{{ results_directory }}"

    - name: Backup current sources.list
      copy:
        src: /etc/apt/sources.list
        dest: /etc/apt/sources.list.backup
        remote_src: yes
        backup: yes

    - name: Update sources.list to use security repository
      replace:
        path: /etc/apt/sources.list
        regexp: 'deb http://archive.ubuntu.com/ubuntu/ jammy main'
        replace: 'deb http://security.ubuntu.com/ubuntu/ jammy-security main'

    - name: Add security repositories
      apt_repository:
        repo: "{{ item }}"
        state: present
        update_cache: no
      loop:
        - "deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted"
        - "deb http://security.ubuntu.com/ubuntu/ jammy-security universe"
        - "deb http://security.ubuntu.com/ubuntu/ jammy-security multiverse"

    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade system packages from security repository
      apt:
        upgrade: safe
        autoremove: yes
        autoclean: yes

    - name: Install required packages
      apt:
        name:
          - libopenscap8
          - ssg-applications
          - ssg-debderived
          - wget
          - unzip
          - oscap-utils
        state: present

    - name: Download SCAP Security Guide
      get_url:
        url: "{{ security_guide_url }}"
        dest: "{{ work_directory }}/scap-security-guide.zip"
        mode: '0644'
        timeout: 300

    - name: Extract SCAP Security Guide
      unarchive:
        src: "{{ work_directory }}/scap-security-guide.zip"
        dest: "{{ work_directory }}"
        remote_src: yes
        creates: "{{ work_directory }}/scap-security-guide-{{ security_guide_version }}"

    - name: Find Ubuntu 22.04 DataStream file
      find:
        paths: "{{ work_directory }}/scap-security-guide-{{ security_guide_version }}"
        patterns: "*ubuntu2204*ds.xml"
        recurse: yes
      register: datastream_files

    - name: Set DataStream file path
      set_fact:
        ds_file: "{{ datastream_files.files[0].path }}"
      when: datastream_files.files | length > 0

    - name: Fail if no DataStream file found
      fail:
        msg: "No Ubuntu 22.04 DataStream file found"
      when: datastream_files.files | length == 0

    - name: List available profiles
      shell: |
        oscap info "{{ ds_file }}" | grep -A 1000 "Profiles:" | grep -E "^\s+Id:|^\s+Title:"
      register: available_profiles
      changed_when: false

    - name: Display available profiles
      debug:
        msg: "{{ available_profiles.stdout_lines }}"

    - name: Check if CIS Level 2 Server profile exists
      shell: |
        oscap info "{{ ds_file }}" | grep "{{ profile_id }}"
      register: profile_check
      failed_when: false
      changed_when: false

    - name: Set alternative profile if CIS Level 2 not found
      set_fact:
        profile_id: "xccdf_org.ssgproject.content_profile_cis_level1_server"
      when: profile_check.rc != 0

    - name: Display selected profile
      debug:
        msg: "Using profile: {{ profile_id }}"

    - name: Create evaluation script
      template:
        dest: "{{ work_directory }}/run_evaluation.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          
          # OpenSCAP Evaluation Script
          # Generated by Ansible
          
          DS_FILE="{{ ds_file }}"
          PROFILE_ID="{{ profile_id }}"
          RESULTS_DIR="{{ results_directory }}"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          echo "Starting OpenSCAP evaluation..."
          echo "DataStream: $DS_FILE"
          echo "Profile: $PROFILE_ID"
          echo "Results directory: $RESULTS_DIR"
          
          # Run evaluation
          oscap xccdf eval \
            --profile "$PROFILE_ID" \
            --results "$RESULTS_DIR/results_${TIMESTAMP}.xml" \
            --report "$RESULTS_DIR/report_${TIMESTAMP}.html" \
            --oval-results \
            "$DS_FILE"
          
          EVAL_EXIT_CODE=$?
          
          echo "Evaluation completed with exit code: $EVAL_EXIT_CODE"
          echo "Results saved to: $RESULTS_DIR/results_${TIMESTAMP}.xml"
          echo "Report saved to: $RESULTS_DIR/report_${TIMESTAMP}.html"
          
          exit $EVAL_EXIT_CODE

    - name: Create remediation script
      template:
        dest: "{{ work_directory }}/run_remediation.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          
          # OpenSCAP Remediation Script
          # Generated by Ansible
          
          DS_FILE="{{ ds_file }}"
          PROFILE_ID="{{ profile_id }}"
          RESULTS_DIR="{{ results_directory }}"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          echo "Starting OpenSCAP remediation..."
          echo "DataStream: $DS_FILE"
          echo "Profile: $PROFILE_ID"
          
          # Generate remediation script first
          echo "Generating remediation script..."
          oscap xccdf generate fix \
            --profile "$PROFILE_ID" \
            --template urn:xccdf:fix:script:sh \
            --output "$RESULTS_DIR/remediation_${TIMESTAMP}.sh" \
            "$DS_FILE"
          
          if [ $? -eq 0 ]; then
            echo "Remediation script generated: $RESULTS_DIR/remediation_${TIMESTAMP}.sh"
            echo ""
            echo "IMPORTANT: Review the remediation script before executing!"
            echo "To apply remediation, run:"
            echo "  sudo bash $RESULTS_DIR/remediation_${TIMESTAMP}.sh"
            echo ""
            echo "Or use oscap xccdf eval with --remediate flag:"
            echo ""
            echo "  sudo oscap xccdf eval \\"
            echo "    --profile \"$PROFILE_ID\" \\"
            echo "    --results \"$RESULTS_DIR/remediation_results_${TIMESTAMP}.xml\" \\"
            echo "    --report \"$RESULTS_DIR/remediation_report_${TIMESTAMP}.html\" \\"
            echo "    --remediate \\"
            echo "    \"$DS_FILE\""
          else
            echo "Failed to generate remediation script"
            exit 1
          fi

    - name: Create info script
      template:
        dest: "{{ work_directory }}/show_info.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          
          # OpenSCAP Information Script
          # Generated by Ansible
          
          DS_FILE="{{ ds_file }}"
          
          echo "=== OpenSCAP DataStream Information ==="
          echo "DataStream file: $DS_FILE"
          echo ""
          
          echo "=== Available Profiles ==="
          oscap info "$DS_FILE" | grep -A 1000 "Profiles:" | head -50
          
          echo ""
          echo "=== Usage Examples ==="
          echo "1. Run evaluation:"
          echo "   cd {{ work_directory }} && ./run_evaluation.sh"
          echo ""
          echo "2. Generate remediation script:"
          echo "   cd {{ work_directory }} && ./run_remediation.sh"
          echo ""
          echo "3. View results:"
          echo "   ls -la {{ results_directory }}/"

    - name: Display completion message
      debug:
        msg: |
          OpenSCAP setup completed successfully!
          
          Working directory: {{ work_directory }}
          Results directory: {{ results_directory }}
          DataStream file: {{ ds_file }}
          Selected profile: {{ profile_id }}
          
          Available scripts:
          - {{ work_directory }}/show_info.sh        - Show DataStream info and usage
          - {{ work_directory }}/run_evaluation.sh   - Run security evaluation
          - {{ work_directory }}/run_remediation.sh  - Generate remediation script
          
          Quick start:
          1. ssh to target server
          2. cd {{ work_directory }}
          3. ./show_info.sh                     # View available profiles
          4. ./run_evaluation.sh               # Run security scan
          5. ./run_remediation.sh              # Generate remediation
          
          Results will be saved in: {{ results_directory }}/

    - name: Restore original sources.list (optional)
      copy:
        src: /etc/apt/sources.list.backup
        dest: /etc/apt/sources.list
        remote_src: yes
      when: restore_sources_list | default(false) | bool
      tags: restore

  handlers:
    - name: update apt cache
      apt:
        update_cache: yes
